// STL
#include<iostream>
#include<fstream>


// RS++
#include"RSDifferentialCrossSection.h"
using namespace RS;
////////////////////////////////////////////////////////////////////////////////
DifferentialCrossSection::DifferentialCrossSection(){
}
////////////////////////////////////////////////////////////////////////////////
DifferentialCrossSection::~DifferentialCrossSection(){
}
////////////////////////////////////////////////////////////////////////////////
void DifferentialCrossSection::LoadFromASCII(std::string filename){
}
////////////////////////////////////////////////////////////////////////////////
double DifferentialCrossSection::Integrate(double low, double up){
  return 0;
}
////////////////////////////////////////////////////////////////////////////////
void DifferentialCrossSection::Scale(double scale){
}
////////////////////////////////////////////////////////////////////////////////
DifferentialCrossSection& DifferentialCrossSection::operator+=(const DifferentialCrossSection& right){
 unsigned int mysize = m_y.size();
 for(unsigned int i = 0 ; i < mysize ; i++){
   m_y[i]+=right.m_y[i];
 }
  return *this;
}
////////////////////////////////////////////////////////////////////////////////
DifferentialCrossSection operator+(DifferentialCrossSection& left, const DifferentialCrossSection& right){
  left+=right;
  return left;
}
////////////////////////////////////////////////////////////////////////////////
DifferentialCrossSection operator-(DifferentialCrossSection& left, const DifferentialCrossSection& right){
  return left;
}
////////////////////////////////////////////////////////////////////////////////
TGraph* GetTGraph(){
  return new TGraph();
}

